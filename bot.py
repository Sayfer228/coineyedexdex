import asyncio
import aiohttp
import json
import logging
import time
import os
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from aiogram.enums import ParseMode


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
TELEGRAM_BOT_TOKEN = "7708249697:AAFaUcc2mvAi3afWEKHDbOfmHD3oWmX6-T8"
USER_CHAT_ID = "802714713"
MIN_DIFF_PERCENT = 1
MIN_LIQUIDITY = 10_000
last_alert_time = 0  # üïí –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–ª–µ—Ä—Ç—É

TOKENS_FILE = Path("tokens.json")
ALERTS_FILE = Path("alerts.json")
monitor_tasks: dict[str, asyncio.Task] = {}
TOKENS: dict[int, list] = {}
AUTHORIZED_USERS = []
PASSWORD = 'f9a2DUFe63'

# ‚úÖ –§–æ—Ä—Å—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ª–æ–≥—ñ–≤ ‚Äî –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —â–æ—Å—å —ó—ó –≤–∂–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–ª–æ
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s | %(levelname)-8s | %(message)s",
    datefmt="%H:%M:%S",
    force=True
)

# ‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π –ª–æ–≥–µ—Ä –¥–ª—è –≤—Å—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É
logger = logging.getLogger("coin-eye")

logger.debug("‚úÖ DEBUG –ø—Ä–∞—Ü—é—î!")




# FSM –°—Ç–∞–Ω –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å–∞—Ö
class AddTokenFSM(StatesGroup):
    waiting_for_bsc = State()
    waiting_for_bsc_pool = State()
    waiting_for_eth = State()
    waiting_for_eth_pool = State()

class AddTokenStates(StatesGroup):
    waiting_for_first_address = State()
    waiting_for_first_pool = State()        # ‚úÖ –¥–æ–¥–∞—î–º–æ —Ü–µ–π —Å—Ç–∞–Ω
    waiting_for_second_address = State()
    waiting_for_second_pool = State()       # ‚úÖ —ñ —Ü–µ–π —Å—Ç–∞–Ω

class EditTokenStates(StatesGroup):
    waiting_for_threshold = State()

class EditThreshold(StatesGroup):
    waiting_for_value = State()

class AuthState(StatesGroup):
    waiting_for_password = State()

TOKENS_FILE = Path("tokens.json")



# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


def is_solana_address(address: str) -> bool:
    return len(address) >= 32 and not address.lower().startswith("0x")


def load_alerts() -> list:
    if ALERTS_FILE.exists():
        with open(ALERTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


@dp.callback_query(AddTokenStates.waiting_for_first_pool)
async def select_first_pool(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pools = data.get("first_pools", [])
    idx = int(callback.data.replace("select_first_", ""))
    if idx >= len(pools):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return

    selected_pool = pools[idx]
    await state.update_data(selected_first_pool=selected_pool)

    # –í–∏–≤–æ–¥–∏–º–æ –ø—É–ª–∏ –¥–ª—è –¥—Ä—É–≥–æ—ó –∞–¥—Ä–µ—Å–∏
    await callback.message.edit_text(
    f"‚úÖ –û–±—Ä–∞–Ω–æ –ø—É–ª —É –ø–µ—Ä—à—ñ–π –º–µ—Ä–µ–∂—ñ: <b>{selected_pool['baseToken']['symbol']}/{selected_pool['quoteToken']['symbol']}</b>\n\n"
    f"üîπ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ <b>–∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω–∞</b> –≤ –¥—Ä—É–≥—ñ–π –º–µ—Ä–µ–∂—ñ:",
    parse_mode="HTML"
)
    await state.set_state(AddTokenStates.waiting_for_second_address)


@dp.callback_query(AddTokenStates.waiting_for_second_pool)
async def select_second_pool(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pools = data.get("second_pools", [])
    idx = int(callback.data.replace("select_second_", ""))
    if idx >= len(pools):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return

    selected_first = data.get("selected_first_pool")
    selected_second = pools[idx]

    symbol = selected_first["baseToken"]["symbol"]

    token_data = {
        "symbol": symbol,
        "networks": {
            selected_first["chainId"]: selected_first["pairAddress"],
            selected_second["chainId"]: selected_second["pairAddress"]
        },
        "active": True
    }

    user_id = callback.from_user.id
    TOKENS.setdefault(user_id, []).append(token_data)
    save_tokens(user_id, TOKENS[user_id])
    await start_monitoring_for_token(user_id, token_data)

    await callback.message.edit_text(
        f"‚úÖ –¢–æ–∫–µ–Ω <b>{symbol}</b> –¥–æ–¥–∞–Ω–æ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º—ñ–∂ "
        f"<b>{selected_first['chainId'].upper()}</b> —Ç–∞ <b>{selected_second['chainId'].upper()}</b>!",
        parse_mode="HTML"
    )
    await state.clear()


def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤")],
            [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å")]
        ],
        resize_keyboard=True
    )


@dp.callback_query(lambda c: c.data == "back_to_tokens")
async def back_to_tokens(callback: CallbackQuery, state: FSMContext):
    await list_tokens(callback.message, state)


@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id in AUTHORIZED_USERS:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
        TOKENS[user_id] = load_tokens(user_id)  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await message.answer("üëÅ‚Äçüó® CoinEye –∑–∞–ø—É—â–µ–Ω–æ. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –∑–∞–ø–∏—Ç—É—î–º–æ –ø–∞—Ä–æ–ª—å
        await message.answer("üîê –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å.")
        await state.set_state(AuthState.waiting_for_password)



def back_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")]
    ])

@dp.message(lambda msg: msg.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω")
async def add_token_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîπ –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω–∞ –≤ –ø–µ—Ä—à—ñ–π –º–µ—Ä–µ–∂—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BSC/SOL):", reply_markup=back_button())
    await state.set_state(AddTokenStates.waiting_for_first_address)  # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω

async def get_pools(url: str, session: aiohttp.ClientSession) -> list:
    try:
        async with session.get(url) as resp:
            if resp.status != 200:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ {url}, —Å—Ç–∞—Ç—É—Å: {resp.status}")
                return []
            data = await resp.json()
            return [p for p in data.get("pairs", []) if p.get("liquidity", {}).get("usd", 0) > MIN_LIQUIDITY]
    except Exception as e:
        logger.exception(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ {url}: {e}")
        return []

# –í–∏–∑–Ω–∞—á–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(AuthState.waiting_for_password)
async def password_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == PASSWORD:
        # –Ø–∫—â–æ –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
        AUTHORIZED_USERS.append(user_id)  # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö
        TOKENS[user_id] = load_tokens(user_id)  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ! –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        await message.answer("üëÅ‚Äçüó® CoinEye –∑–∞–ø—É—â–µ–Ω–æ. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())
        await state.clear()  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω FSM
    else:
        # –Ø–∫—â–æ –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")




@dp.message(AddTokenStates.waiting_for_first_address)
async def handle_first_address(message: Message, state: FSMContext):
    address = message.text.strip()
    await state.update_data(first_address=address)
    url = f"https://api.dexscreener.com/latest/dex/search?q={address}"

    if is_solana_address(address):
        logger.debug(f"[Solana] –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è Solana —Ç–æ–∫–µ–Ω: {address}")
        await bot.send_message(message.chat.id, "üß¨ –°—Ö–æ–∂–µ, —Ü–µ —Ç–æ–∫–µ–Ω —É –º–µ—Ä–µ–∂—ñ Solana.")

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ get_pools –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–ª—ñ–≤
    async with aiohttp.ClientSession() as session:
        pools = await get_pools(url, session)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é get_pools

    if not pools:
        await bot.send_message(message.chat.id, "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—É–ª—ñ–≤ –∑ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é > $10,000. –í–≤–µ–¥–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥.")
        return

    await state.update_data(first_pools=pools)

    kb = InlineKeyboardBuilder()
    for i, p in enumerate(pools[:10]):
        symbol = p["baseToken"]["symbol"]
        quote = p["quoteToken"]["symbol"]
        price = float(p["priceUsd"])
        kb.add(InlineKeyboardButton(
            text=f"{symbol}/{quote} (${price:.4f})",
            callback_data=f"select_first_{i}"
        ))

    await bot.send_message(message.chat.id, "üîΩ –û–±–µ—Ä–∏ –ø—É–ª –¥–ª—è –ø–µ—Ä—à–æ—ó –º–µ—Ä–µ–∂—ñ:", reply_markup=kb.adjust(1).as_markup())
    await state.set_state(AddTokenStates.waiting_for_first_pool)




@dp.callback_query(AddTokenStates.waiting_for_first_pool)
async def handle_first_pool(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pools = data.get("first_pools", [])

    try:
        idx = int(callback.data.replace("select_first_", ""))
        selected_pool = pools[idx]
    except (ValueError, IndexError):
        await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return

    await state.update_data(first_selected=selected_pool)
    await callback.message.edit_text(
        f"‚úÖ –û–±—Ä–∞–Ω–æ –ø—É–ª —É –ø–µ—Ä—à—ñ–π –º–µ—Ä–µ–∂—ñ: <b>{selected_pool['baseToken']['symbol']}/{selected_pool['quoteToken']['symbol']}</b>",
        parse_mode="HTML"
    )

    # ‚¨áÔ∏è –û—Å—å —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    await bot.send_message(callback.from_user.id, "üîπ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω–∞ –≤ –¥—Ä—É–≥—ñ–π –º–µ—Ä–µ–∂—ñ:")
    await state.set_state(AddTokenStates.waiting_for_second_address)



@dp.message(AddTokenStates.waiting_for_second_address)
async def handle_second_address(message: Message, state: FSMContext):
    address = message.text.strip()
    await state.update_data(second_address=address)
    url = f"https://api.dexscreener.com/latest/dex/search?q={address}"


    if is_solana_address(address):
        logger.debug(f"[Solana] –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è Solana —Ç–æ–∫–µ–Ω: {address}")
        await message.answer("üß¨ –°—Ö–æ–∂–µ, —Ü–µ —Ç–æ–∫–µ–Ω —É –º–µ—Ä–µ–∂—ñ Solana.")

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status != 200:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ {url}, —Å—Ç–∞—Ç—É—Å: {resp.status}")
                await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return
            data = await resp.json()

    pools = [
        p for p in data.get("pairs", [])
        if p.get("liquidity", {}).get("usd", 0) > 10_000
    ]

    if not pools:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—É–ª—ñ–≤ –∑ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é > $10,000. –í–≤–µ–¥–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥.")
        return

    await state.update_data(second_pools=pools)

    kb = InlineKeyboardBuilder()
    for i, p in enumerate(pools[:10]):
        symbol = p["baseToken"]["symbol"]
        quote = p["quoteToken"]["symbol"]
        price = float(p["priceUsd"])
        kb.add(InlineKeyboardButton(
            text=f"{symbol}/{quote} (${price:.4f})",
            callback_data=f"select_second_{i}"
        ))

    await message.answer("üîΩ –û–±–µ—Ä–∏ –ø—É–ª –¥–ª—è –¥—Ä—É–≥–æ—ó –º–µ—Ä–µ–∂—ñ:", reply_markup=kb.adjust(1).as_markup())
    await state.set_state(AddTokenStates.waiting_for_second_pool)


@dp.callback_query(AddTokenStates.waiting_for_second_pool)
async def handle_second_pool(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pools = data.get("second_pools", [])

    try:
        idx = int(callback.data.replace("select_second_", ""))
        second_pool = pools[idx]
    except (ValueError, IndexError):
        await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä.")
        return

    first_pool = data.get("first_selected")

    symbol = first_pool["baseToken"]["symbol"]
    first_chain = first_pool["chainId"]
    second_chain = second_pool["chainId"]
    first_token_address = first_pool["baseToken"]["address"]
    second_token_address = second_pool["baseToken"]["address"]

    token_data = {
        "symbol": symbol,
        "addresses": {
            first_chain: first_token_address,
            second_chain: second_token_address
        },
        "active": True,
        "threshold": MIN_DIFF_PERCENT
    }

    user_id = callback.from_user.id
    TOKENS.setdefault(user_id, []).append(token_data)
    save_tokens(user_id, TOKENS[user_id])
    await start_monitoring_for_token(user_id, token_data)

    await callback.message.edit_text(
        f"‚úÖ –¢–æ–∫–µ–Ω <b>{symbol}</b> –¥–æ–¥–∞–Ω–æ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º—ñ–∂ "
        f"<b>{first_chain.upper()}</b> —Ç–∞ <b>{second_chain.upper()}</b>!",
        parse_mode="HTML"
    )
    await state.clear()



async def show_pools_for_addresses(state: FSMContext, message: Message):
    data = await state.get_data()
    addr1 = data["first_address"]
    addr2 = data["second_address"]

    pools_by_address = {}

    async with aiohttp.ClientSession() as session:
        for i, addr in enumerate([addr1, addr2]):
            url = f"https://api.dexscreener.com/latest/dex/search?q={addr}"
            async with session.get(url) as resp:
                if resp.status != 200:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ {url}, —Å—Ç–∞—Ç—É—Å: {resp.status}")
                    await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    return
                data = await resp.json()

            pools = [p for p in data.get("pairs", []) if float(p.get("liquidity", {}).get("usd", 0)) > 10000]
            key = "first_pools" if i == 0 else "second_pools"
            pools_by_address[key] = pools

    if not pools_by_address["first_pools"] or not pools_by_address["second_pools"]:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—É–ª—ñ–≤ –∑ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é > $10,000 –¥–ª—è –æ–¥–Ω—ñ—î—ó –∑ –∞–¥—Ä–µ—Å.")
        await state.clear()
        return

    await state.update_data(**pools_by_address)

    # –í–∏–≤–æ–¥–∏–º–æ –ø—É–ª–∏ –¥–ª—è –ø–µ—Ä—à–æ—ó –∞–¥—Ä–µ—Å–∏
    kb = InlineKeyboardBuilder()
    text = "üîΩ –û–±–µ—Ä–∏ –ø—É–ª –¥–ª—è –ø–µ—Ä—à–æ—ó –º–µ—Ä–µ–∂—ñ:\n\n"

    for i, p in enumerate(pools_by_address["first_pools"][:10]):
        text += (
            f"{i + 1}. üåê {p['chainId'].upper()} | {p['dexId'].capitalize()}\n"
            f"üíµ ${float(p['priceUsd']):.4f} | üíß ${int(float(p['liquidity']['usd'])):,}\n\n"
        )
        kb.add(InlineKeyboardButton(text=f"–û–±—Ä–∞—Ç–∏ #{i + 1}", callback_data=f"select_first_{i}"))

    await message.answer(text, reply_markup=kb.adjust(1).as_markup())
    await state.set_state(AddTokenStates.waiting_for_first_pool)

def save_alert_to_history(user_id: int, symbol: str, prices: dict, diff: float):
    path = get_user_alerts_path(user_id)
    entry = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "symbol": symbol,
        "prices": prices,
        "diff": round(diff, 2)
    }
    history = []
    if path.exists():
        with open(path, "r", encoding="utf-8") as f:
            history = json.load(f)
    history.append(entry)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(history[-50:], f, indent=2, ensure_ascii=False)

@dp.message(lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤")
async def list_tokens(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_tokens = load_tokens(user_id)
    TOKENS[user_id] = user_tokens  # –æ–Ω–æ–≤–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à

    if not user_tokens:
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back"))
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=kb.as_markup())
        return

    kb = InlineKeyboardBuilder()
    for idx, token in enumerate(user_tokens):
        symbol = token.get("symbol") or token.get("name")
        chains = list(token.get("addresses", {}).keys())
        active = "üü¢" if token.get("active", True) else "üî¥"
        kb.row(InlineKeyboardButton(  # ‚Üê –ó–ú–Ü–ù–ê –¢–£–¢
            text=f"{active} {symbol.upper()} ({', '.join(chains)})",
            callback_data=f"manage_{idx}"
        ))

    kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back"))
    await message.answer("üìã –û–±–µ—Ä–∏ —Ç–æ–∫–µ–Ω:", reply_markup=kb.as_markup())

async def toggle_token_monitoring(user_id: int, token: dict):
    """
    –ü–µ—Ä–µ–º–∏–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞: –≤–∫–ª—é—á–∞—î –∞–±–æ –≤–∏–º–∏–∫–∞—î –π–æ–≥–æ.
    """
    symbol = token["symbol"]
    task_key = f"{user_id}:{symbol}"

    if token.get("active", True):  # –¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
        logger.info(f"–í–∏–º–∏–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {symbol}.")
        token["active"] = False  # –í–∏–º–∏–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥

        # –ó—É–ø–∏–Ω—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        if task_key in monitor_tasks:
            logger.info(f"–ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {symbol}. –ó–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            monitor_tasks[task_key].cancel()
            del monitor_tasks[task_key]
        else:
            logger.warning(f"–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol}.")
    else:  # –¢–æ–∫–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
        logger.info(f"–í–º–∏–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {symbol}.")
        token["active"] = True  # –í–º–∏–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        await start_monitoring_for_token(user_id, token)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–∫–µ–Ω—ñ–≤
    save_tokens(user_id, TOKENS[user_id])



@dp.message(lambda msg: msg.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏")
async def edit_tokens(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    tokens = TOKENS.get(user_id, [])

    if not tokens:
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back"))
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=kb.as_markup())
        return

    kb = InlineKeyboardBuilder()
    for idx, token in enumerate(tokens):
        symbol = token.get("symbol") or token.get("name")
        chains = list(token.get("addresses", {}).keys())
        kb.add(InlineKeyboardButton(
            text=f"üóë {symbol.upper()} ({', '.join(chains)})",
            callback_data=f"delete_{idx}"
        ))

    kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back"))
    await message.answer("üßπ –û–±–µ—Ä–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb.as_markup())




@dp.callback_query(lambda c: c.data.startswith("manage_"))
async def manage_token(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    idx = int(callback.data.replace("manage_", ""))

    user_tokens = TOKENS.get(user_id, [])
    if idx >= len(user_tokens):
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ç–æ–∫–µ–Ω–∞.")
        return

    token = user_tokens[idx]
    symbol = token["symbol"]

    await state.update_data(prev_menu="tokens", editing_idx=idx)

    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîß –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—ñ–≥", callback_data=f"edit_threshold_{idx}"))
    kb.row(InlineKeyboardButton(text="‚èØ –í–∫–ª/–í–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥", callback_data=f"toggle_{idx}"))
    kb.row(InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–∫–µ–Ω", callback_data=f"delete_{idx}"))
    kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back"))

    await callback.message.edit_text(
        f"üîç <b>{symbol.upper()}</b> ‚Äî –æ–±–µ—Ä–∏ –¥—ñ—é:",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )


async def set_threshold(message: Message, state: FSMContext):
    try:
        value = float(message.text.strip().replace(",", "."))
        if not 0 < value < 100:
            raise ValueError("–ü–æ—Ä—ñ–≥ –º–∞—î –±—É—Ç–∏ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ 0 –¥–æ 100.")

        data = await state.get_data()
        idx = data["edit_idx"]
        token = TOKENS[data["user_id"]][idx]  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–µ—à—É

        # –Ø–∫—â–æ –ø–æ—Ä—ñ–≥ –∑–º—ñ–Ω–∏–≤—Å—è, –∑—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–µ
        old_threshold = token["threshold"]
        if value != old_threshold:
            logger.info(f"–ó–º—ñ–Ω—é—î–º–æ –ø–æ—Ä—ñ–≥ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token['symbol']} –∑ {old_threshold}% –Ω–∞ {value}%")
            token["threshold"] = value  # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä—ñ–≥

            save_tokens(data["user_id"], TOKENS[data["user_id"]])  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Ä—ñ–≥ —É —Ñ–∞–π–ª

            # –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É, —è–∫—â–æ –≤–æ–Ω–æ —î
            task_key = f"{data['user_id']}:{token['symbol']}"
            if task_key in monitor_tasks:
                monitor_tasks[task_key].cancel()
                del monitor_tasks[task_key]  # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –ø–æ—Ä–æ–≥–æ–º
            await start_monitoring_for_token(data['user_id'], token)

        symbol = token["symbol"]
        await message.answer(f"‚úÖ –ù–æ–≤–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è <b>{symbol.upper()}</b>: {value:.2f}%", parse_mode="HTML")
        await list_tokens(message, state)

    except ValueError as e:
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")



async def add_token_to_monitoring(user_id: int, token_data: dict):
    logger.info(f"–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {token_data['symbol']}")
    TOKENS.setdefault(user_id, []).append(token_data)
    save_tokens(user_id, TOKENS[user_id])
    await start_monitoring_for_token(user_id, token_data)


@dp.callback_query(lambda c: c.data.startswith("edit_threshold_"))
async def start_edit_threshold(callback: CallbackQuery, state: FSMContext):
    idx = int(callback.data.replace("edit_threshold_", ""))
    await state.update_data(editing_idx=idx)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –ø–æ—Ä—ñ–≥ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1.5):", reply_markup=kb)
    await state.set_state(EditThreshold.waiting_for_value)


@dp.callback_query(lambda c: c.data == "go_back")
async def go_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üëÅ CoinEye —á–µ–∫–∞—î —Ç–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏. –û–±–∏—Ä–∞–π:", reply_markup=main_menu())


@dp.message(EditThreshold.waiting_for_value)
async def save_new_threshold(message: Message, state: FSMContext):
    user_id = message.from_user.id
    tokens = TOKENS.get(user_id, [])

    if message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üëÅ CoinEye —á–µ–∫–∞—î —Ç–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏. –û–±–∏—Ä–∞–π:", reply_markup=main_menu())
        return

    try:
        percent = float(message.text.strip().replace(",", "."))
        if percent <= 0 or percent > 100:
            raise ValueError

        data = await state.get_data()
        idx = data.get("editing_idx")
        token = tokens[idx]
        token["threshold"] = percent

        save_tokens(user_id, tokens)
        TOKENS[user_id] = tokens

        # –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ç–∞—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (—è–∫—â–æ —ñ—Å–Ω—É—î)
        symbol = token["symbol"]
        task_key = f"{user_id}:{symbol}"
        if task_key in monitor_tasks:
            monitor_tasks[task_key].cancel()
            del monitor_tasks[task_key]

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –ø–æ—Ä–æ–≥–æ–º
        await start_monitoring_for_token(user_id, token)

        await message.answer(
            f"‚úÖ –ù–æ–≤–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è <b>{symbol.upper()}</b>: <b>{percent}%</b>",
            parse_mode="HTML",
            reply_markup=main_menu()
        )
        await state.clear()

    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1.5):")



@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_token(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    idx = int(callback.data.replace("delete_", ""))

    try:
        tokens = TOKENS.get(user_id, [])
        if idx >= len(tokens):
            await callback.answer("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        deleted = tokens.pop(idx)
        symbol = deleted.get("name") or deleted.get("symbol")
        task_key = f"{user_id}:{symbol}"

        # üõë –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥, —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π
        if task_key in monitor_tasks:
            monitor_tasks[task_key].cancel()
            del monitor_tasks[task_key]

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤
        save_tokens(user_id, tokens)
        TOKENS[user_id] = tokens  # –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à

        await callback.message.edit_text(
            f"‚ùå –¢–æ–∫–µ–Ω <b>{symbol.upper()}</b> –≤–∏–¥–∞–ª–µ–Ω–æ.",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.exception(f"[ERROR] delete_token: {e}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ.")




MIN_DIFF_PERCENT = 1  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è –≤ % –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
MIN_LIQUIDITY = 10_000

import time  # –£ –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —Ñ–∞–π–ª—É, —è–∫—â–æ —â–µ –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ

async def monitor_token_by_address(user_id: int, token: dict, session: aiohttp.ClientSession, bot: Bot):
    symbol = token["symbol"]
    addresses = token["addresses"]
    last_alert_time = 0

    # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π ‚Äî –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    if not token.get("active", True):
        logger.info(f"[MONITORING] [{user_id}] {symbol} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.")
        return

    logger.info(f"[MONITORING] [{user_id}] {symbol} ‚Üí {list(addresses.keys())} | ACTIVE")

    while token.get("active", True):  # –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É
        prices = {}
        now = time.time()

        for chain, address in addresses.items():
            url = f"https://api.dexscreener.com/latest/dex/search?q={address}"
            try:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ {url}, —Å—Ç–∞—Ç—É—Å: {resp.status}")
                        await bot.send_message(user_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                        return
                    data = await resp.json()

                best_price = None
                max_liquidity = 0
                for p in data.get("pairs", []):
                    if p["chainId"].lower().startswith(chain.lower()):
                        liquidity = float(p.get("liquidity", {}).get("usd", 0))
                        price = float(p.get("priceUsd", 0))
                        if liquidity > MIN_LIQUIDITY and liquidity > max_liquidity:
                            max_liquidity = liquidity
                            best_price = price

                if best_price:
                    prices[chain] = best_price

            except Exception:
                logger.exception(f"[ERROR monitor_by_address {symbol}]")

        if len(prices) >= 2:
            v = list(prices.values())
            diff = abs(v[0] - v[1]) / ((v[0] + v[1]) / 2) * 100
            current_threshold = token.get("threshold", MIN_DIFF_PERCENT)

            logger.debug(f"[MONITORING] –†—ñ–∑–Ω–∏—Ü—è —Ü—ñ–Ω –¥–ª—è {symbol}: {diff:.2f}% | –ü–æ—Ä—ñ–≥: {current_threshold}%")

            if diff >= current_threshold and now - last_alert_time >= 60:
                msg = (
                    f"‚ö†Ô∏è <b>{symbol.upper()}</b> –º–∞—î —Ä—ñ–∑–Ω–∏—Ü—é —Ü—ñ–Ω –º—ñ–∂ –º–µ—Ä–µ–∂–∞–º–∏!\n\n" +
                    "\n".join([f"üåê {c.upper()}: ${prices[c]:.4f}" for c in prices]) +
                    f"\n\nüìä –†—ñ–∑–Ω–∏—Ü—è: <b>{diff:.2f}%</b>"
                )
                await bot.send_message(user_id, msg)
                save_alert_to_history(user_id, symbol, prices, diff)
                last_alert_time = now

        await asyncio.sleep(5)



async def start_monitoring_for_token(user_id: int, token: dict):
    """
    –ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
    """
    symbol = token.get("symbol") or token.get("name")

    if "addresses" in token:
        task_key = f"{user_id}:{symbol}"

        # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ —î, —Ç–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–µ
        if task_key in monitor_tasks:
            logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol} –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–µ.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        task = asyncio.create_task(monitor_token_by_address(user_id, token, session, bot))
        monitor_tasks[task_key] = task  # –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    else:
        logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–∫–µ–Ω –±–µ–∑ –∞–¥—Ä–µ—Å–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {symbol}")


import time

async def monitor_token(user_id: int, token: dict, session: aiohttp.ClientSession, bot: Bot):
    symbol = token.get("name") or token.get("symbol")
    chains = token.get("chains")
    last_alert_time = 0  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞ 0

    logger.info(f"[MONITORING] [{user_id}] {symbol} ‚Üí {chains} | ACTIVE")

    while token.get("active", True):
        try:
            url = f"https://api.dexscreener.com/latest/dex/search?q={symbol}"
            async with session.get(url) as resp:
                if resp.status != 200:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ {url}, —Å—Ç–∞—Ç—É—Å: {resp.status}")
                    await bot.send_message(user_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    return
                data = await resp.json()

            best_prices = {}
            for pair in data.get("pairs", []):
                chain = pair.get("chainId")
                liquidity = float(pair.get("liquidity", {}).get("usd", 0))
                price = float(pair.get("priceUsd", 0))

                if chain in chains and liquidity >= MIN_LIQUIDITY:
                    if chain not in best_prices or liquidity > best_prices[chain][1]:
                        best_prices[chain] = (price, liquidity)

            prices = {c: p[0] for c, p in best_prices.items()}
            if len(prices) >= 2:
                values = list(prices.values())
                diff = abs(values[0] - values[1]) / ((values[0] + values[1]) / 2) * 100

                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—ñ–≥ –∑ —Ç–æ–∫–µ–Ω–∞ (—è–∫—â–æ —î, —è–∫—â–æ –Ω—ñ ‚Äî –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º MIN_DIFF_PERCENT)
                threshold = token.get("threshold", MIN_DIFF_PERCENT)

                now = time.time()
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ä—ñ–∑–Ω–∏—Ü—è –ø–µ—Ä–µ–≤–∏—â—É—î –ø–æ—Ä—ñ–≥ —ñ —á–∏ —á–∞—Å –º—ñ–∂ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏ –±—ñ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥
                if diff >= threshold and now - last_alert_time >= 60:
                    msg = (
                        f"‚ö†Ô∏è <b>{symbol.upper()}</b> –º–∞—î —Ä—ñ–∑–Ω–∏—Ü—é —Ü—ñ–Ω –º—ñ–∂ –º–µ—Ä–µ–∂–∞–º–∏!\n\n" +
                        "\n".join([f"üåê {c.upper()}: ${prices[c]:.4f}" for c in prices]) +
                        f"\n\nüìä –†—ñ–∑–Ω–∏—Ü—è: <b>{diff:.2f}%</b>"
                    )
                    await bot.send_message(user_id, msg)
                    save_alert_to_history(user_id, symbol, prices, diff)
                    last_alert_time = now  # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        except Exception as e:
            logger.exception(f"[ERROR monitor_token {symbol}]: {e}")

        await asyncio.sleep(5)


async def start_monitoring_for_token(user_id: int, token: dict):
    symbol = token.get("symbol") or token.get("name")
    task_key = f"{user_id}:{symbol}"

    # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤–∂–µ —î, –∑—É–ø–∏–Ω—è—î–º–æ –π–æ–≥–æ —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–µ
    if task_key in monitor_tasks:
        logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {symbol} –≤–∂–µ —î, –∑—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        monitor_tasks[task_key].cancel()
        del monitor_tasks[task_key]  # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    task = asyncio.create_task(monitor_token_by_address(user_id, token, session, bot))
    monitor_tasks[task_key] = task  # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞



async def get_prices_by_name(session: aiohttp.ClientSession, symbol: str, chains: list[str], bot: Bot, user_id: int) -> dict:
    url = f"https://api.dexscreener.com/latest/dex/search?q={symbol}"
    best = {}

    try:
        async with session.get(url) as resp:
            if resp.status != 200:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ {url}, —Å—Ç–∞—Ç—É—Å: {resp.status}")
                await bot.send_message(user_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return
            data = await resp.json()

            print(f"[DEBUG] [{symbol.upper()}] data keys: {list(data.keys())}")

            for pair in data.get("pairs", []):
                chain = pair.get("chainId")
                price = pair.get("priceUsd")
                liquidity = pair.get("liquidity", {}).get("usd")

                if chain in chains and price and liquidity and float(liquidity) >= MIN_LIQUIDITY:
                    if chain not in best or float(liquidity) > best[chain][1]:
                        best[chain] = (float(price), float(liquidity))

        return {chain: p[0] for chain, p in best.items()}

    except Exception as e:
        print(f"[ERROR get_prices_by_name {symbol}]: {e}")
        return {}


@dp.message(Command("history"))
async def history_command(message: Message):
    user_id = message.from_user.id
    path = get_user_alerts_path(user_id)

    if not path.exists():
        await message.answer("‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
        return

    with path.open("r", encoding="utf-8") as f:
        alerts = json.load(f)

    if not alerts:
        await message.answer("‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
        return

    last_alerts = alerts[-5:]  # –û—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤
    text = "<b>üìú –û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:</b>\n\n"
    for a in last_alerts:
        prices = "\n".join([f"üåê {c.upper()}: ${p:.4f}" for c, p in a['prices'].items()])
        text += (
            f"üîπ <b>{a['symbol'].upper()}</b>\n"
            f"{prices}\n"
            f"üìä –†—ñ–∑–Ω–∏—Ü—è: <b>{a['diff']}%</b>\n"
            f"üïí {a['timestamp']}\n\n"
        )

    await message.answer(text, parse_mode="HTML")


def get_user_alerts_path(user_id: int) -> Path:
    return get_user_data_dir(user_id) / "alerts.json"

@dp.message(lambda msg: msg.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω—å")
async def show_alert_history(message: Message):
    user_id = message.from_user.id
    path = get_user_alerts_path(user_id)

    if not path.exists():
        await message.answer("‚õî –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
        return

    with open(path, "r", encoding="utf-8") as f:
        history = json.load(f)

    if not history:
        await message.answer("‚õî –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
        return

    text = "üìú <b>–û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:</b>\n\n"
    for entry in reversed(history[-10:]):
        prices = "\n".join([f"üåê {k.upper()}: ${v:.4f}" for k, v in entry["prices"].items()])
        text += (
            f"üïí <i>{entry['timestamp']}</i>\n"
            f"üîπ <b>{entry['symbol'].upper()}</b>\n"
            f"{prices}\n"
            f"üìä –†—ñ–∑–Ω–∏—Ü—è: <b>{entry['diff']}%</b>\n\n"
        )

    await message.answer(text, parse_mode="HTML")






def get_user_data_dir(user_id: int) -> Path:
    user_dir = Path("data") / str(user_id)
    user_dir.mkdir(parents=True, exist_ok=True)
    return user_dir

def get_user_tokens_path(user_id: int) -> Path:
    return get_user_data_dir(user_id) / "tokens.json"

def load_tokens(user_id: int) -> list:
    path = get_user_tokens_path(user_id)
    if path.exists():
        with path.open(encoding="utf-8") as f:
            return json.load(f)
    return []

def save_tokens(user_id: int, tokens: list):
    path = get_user_tokens_path(user_id)
    with path.open("w", encoding="utf-8") as f:
        json.dump(tokens, f, indent=2, ensure_ascii=False)
    TOKENS[user_id] = tokens  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Ç–æ–∫–µ–Ω—ñ–≤, —â–æ–± –∑–º—ñ–Ω–∏ –±—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –Ω–µ–≥–∞–π–Ω–æ

@dp.callback_query(lambda c: c.data.startswith("toggle_"))
async def toggle_token(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    idx = int(callback.data.replace("toggle_", ""))

    tokens = TOKENS.get(user_id, [])
    if idx >= len(tokens):
        await callback.answer("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    token = tokens[idx]
    symbol = token["symbol"]

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    await toggle_token_monitoring(user_id, token)

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if token["active"]:
        await callback.answer("‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
    else:
        await callback.answer("‚õî –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ.")

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
    TOKENS[user_id] = tokens
    save_tokens(user_id, tokens)


@dp.message(Command("help"))
async def help_command(message: Message):
    text = (
        "<b>üëÅ CoinEye ‚Äî –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ä—ñ–∑–Ω–∏—Ü—ñ —Ü—ñ–Ω –º—ñ–∂ –º–µ—Ä–µ–∂–∞–º–∏.</b>\n\n"
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/help ‚Äî –ü–æ–±–∞—á–∏—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
        "/history ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n\n"
        "üìç –£ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –º–æ–∂–Ω–∞:\n"
        "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–∫–µ–Ω\n"
        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏\n"
        "üìã –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤\n\n"
        "‚ÑπÔ∏è –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Ü—ñ–Ω–∏\n"
        "—ñ –Ω–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ —Ä—ñ–∑–Ω–∏—Ü—ñ –ø–æ–Ω–∞–¥ –∑–∞–¥–∞–Ω–∏–π –ø–æ—Ä—ñ–≥ (–≤—ñ–¥ 1%)."
    )
    await message.answer(text, parse_mode="HTML")


async def main():
    global session
    session = aiohttp.ClientSession()

    # üîß –î–æ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–î–æ–≤—ñ–¥–∫–∞"),
        types.BotCommand(command="history", description="–û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"),
    ])

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    tokens_path = Path("data")
    users = []
    if tokens_path.exists():
        users = [int(p.name) for p in tokens_path.iterdir() if p.is_dir() and (p / "tokens.json").exists()]

    for user_id in users:
        tokens = load_tokens(user_id)
        for token in tokens:
            if token.get("active", True):
                symbol = token.get("symbol") or token.get("name")
                task_key = f"{user_id}:{symbol}"
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º–µ—Ä–µ–∂ —ñ –∞–¥—Ä–µ—Å—É —Ç–æ–∫–µ–Ω–∞
                    if "networks" in token and "addresses" not in token:
                        token["addresses"] = token["networks"]

                    # üü¢ –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π monitor_token_by_address
                    if "addresses" in token:
                        task = asyncio.create_task(monitor_token_by_address(user_id, token, session, bot))
                        # –î–æ–¥–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ monitor_tasks –ø–æ –∫–ª—é—á—É task_key
                        monitor_tasks.setdefault(user_id, {})[task_key] = task
                    else:
                        logger.warning(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–∫–µ–Ω –±–µ–∑ addresses: {symbol}")

                except Exception as e:
                    logger.exception(f"[ERROR] Failed to start monitor for {symbol} (user {user_id}): {e}")

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    await dp.start_polling(bot)
    await session.close()



if __name__ == "__main__":
    asyncio.run(main())
